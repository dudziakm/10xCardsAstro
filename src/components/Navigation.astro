---
interface Props {
  currentPath?: string;
}

const { currentPath = Astro.url.pathname } = Astro.props;
const { session } = Astro.locals;

const navItems = [
  { href: "/", label: "Start", icon: "🏠" },
  { href: "/flashcards", label: "Moje fiszki", icon: "📚" },
  { href: "/generate", label: "Generuj AI", icon: "🤖" },
  { href: "/learn", label: "Ucz się", icon: "🎯" },
];

const isActive = (href: string) => {
  if (href === "/") {
    return currentPath === "/";
  }
  return currentPath.startsWith(href);
};
---

<nav class="bg-white shadow-sm border-b border-gray-200">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between h-16">
      <div class="flex">
        <!-- Logo -->
        <div class="flex-shrink-0 flex items-center">
          <a href="/" class="flex items-center space-x-2 text-xl font-bold text-gray-900">
            <span class="text-2xl">🧠</span>
            <span>my10xCards</span>
          </a>
        </div>

        <!-- Navigation Links -->
        <div class="hidden sm:ml-6 sm:flex sm:space-x-8">
          {
            navItems.map((item) => (
              <a
                href={item.href}
                class={`inline-flex items-center px-1 pt-1 text-sm font-medium border-b-2 transition-colors ${
                  isActive(item.href)
                    ? "border-blue-500 text-gray-900"
                    : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                }`}
              >
                <span class="mr-2">{item.icon}</span>
                {item.label}
              </a>
            ))
          }
        </div>
      </div>

      <!-- User section -->
      <div class="hidden sm:flex sm:items-center sm:space-x-4">
        {
          session ? (
            <div class="flex items-center space-x-3">
              <span class="text-sm text-gray-600">👋 Zalogowany</span>
              <button
                onclick="logout()"
                class="text-sm text-red-600 hover:text-red-700 font-medium px-3 py-1 rounded-md hover:bg-red-50 transition-colors"
              >
                Wyloguj
              </button>
            </div>
          ) : (
            <div class="flex items-center space-x-2">
              <a
                href="/auth/login"
                class="text-sm text-gray-600 hover:text-gray-900 font-medium px-3 py-1 rounded-md hover:bg-gray-100 transition-colors"
              >
                Zaloguj
              </a>
              <a
                href="/auth/signup"
                class="text-sm text-white bg-blue-600 hover:bg-blue-700 font-medium px-3 py-1 rounded-md transition-colors"
              >
                Rejestracja
              </a>
            </div>
          )
        }
      </div>

      <!-- Mobile menu button -->
      <div class="sm:hidden flex items-center">
        <button
          type="button"
          class="mobile-menu-button inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500"
          aria-expanded="false"
        >
          <span class="sr-only">Otwórz menu główne</span>
          <!-- Hamburger icon -->
          <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu -->
  <div class="mobile-menu hidden sm:hidden">
    <div class="pt-2 pb-3 space-y-1">
      {
        navItems.map((item) => (
          <a
            href={item.href}
            class={`block pl-3 pr-4 py-2 text-base font-medium transition-colors ${
              isActive(item.href)
                ? "bg-blue-50 border-r-4 border-blue-500 text-blue-700"
                : "text-gray-500 hover:text-gray-700 hover:bg-gray-50"
            }`}
          >
            <span class="mr-2">{item.icon}</span>
            {item.label}
          </a>
        ))
      }
    </div>
  </div>
</nav>

<script>
  /* eslint-disable */
  // Mobile menu toggle
  document.addEventListener("DOMContentLoaded", function () {
    const button = document.querySelector(".mobile-menu-button");
    const menu = document.querySelector(".mobile-menu");

    if (button && menu) {
      button.addEventListener("click", function () {
        menu.classList.toggle("hidden");
      });
    }
  });

  // Logout function
  async function logout() {
    try {
      const response = await fetch("/api/auth/logout", {
        method: "POST",
      });

      if (response.ok) {
        window.location.href = "/";
      }
    } catch {
      // Logout error - could be logged in production
    }
  }

  // Make logout function globally available
  window.logout = logout;
</script>
